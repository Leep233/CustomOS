     1                                  
     2                                  section mbr vstart=0x7c00
     3                                  
     4 00000000 BE0005                      mov si,0x500
     5 00000003 B90100                      mov cx,1
     6 00000006 66B801000000                mov eax,1
     7                                  
     8 0000000C EB05                        jmp read_disk_16
     9                                  
    10 0000000E EA00050000                  jmp 0x0000:0x500
    11                                  
    12                                       %include ".\src\disk_reader_16.asm"
    13                              <1> ;// 按两字节 读取硬盘
    14                              <1> ;// sp:读取内容后需要加载到的内存
    15                              <1> ;// cl: 读取的扇区数量
    16                              <1> ;// eax:LBA模式下 最开始读取的扇区下标
    17                              <1> read_disk_16:
    18                              <1>    ; //保存需要加载到的地址
    19 00000013 56                  <1>     push si
    20 00000014 51                  <1>     push cx
    21 00000015 6650                <1>     push eax
    22                              <1>    ; //保存需要读取的扇区数
    23                              <1>   
    24                              <1>    ; //写入需要读取的扇区数量
    25 00000017 BAF201              <1>     mov dx,0x1F2
    26 0000001A 89C8                <1>     mov ax,cx
    27 0000001C EE                  <1>     out dx,al
    28                              <1> 
    29 0000001D 6658                <1>     pop eax
    30                              <1> 
    31                              <1>     ;//lba模式低8bit
    32 0000001F BAF301              <1>     mov dx,0x1F3
    33 00000022 EE                  <1>     out dx,al
    34                              <1> 
    35                              <1>     ;//lba模式中8bit
    36 00000023 B90800              <1>     mov cx,8
    37                              <1> 
    38 00000026 BAF401              <1>     mov dx,0x1F4
    39 00000029 66D3E8              <1>     shr eax,cl
    40 0000002C EE                  <1>     out dx,al
    41                              <1> 
    42 0000002D BAF501              <1>     mov dx,0x1F5
    43 00000030 66D3E8              <1>     shr eax,cl
    44 00000033 EE                  <1>     out dx,al
    45                              <1> 
    46 00000034 66D3E8              <1>     shr eax,cl
    47 00000037 240F                <1>     and al,0x0F
    48 00000039 0CE0                <1>     or al,0xE0
    49 0000003B BAF601              <1>     mov dx,0x1F6
    50 0000003E EE                  <1>     out dx,al
    51                              <1>     
    52 0000003F BAF701              <1>     mov dx,0x1F7
    53 00000042 B82000              <1>     mov ax,0x20
    54 00000045 EE                  <1>     out dx,al
    55                              <1> 
    56                              <1>     ;//未准备好读取
    57                              <1>     .noready_read:
    58 00000046 90                  <1>         nop
    59 00000047 EC                  <1>         in al,dx
    60 00000048 2488                <1>         and al,1000_1000b
    61 0000004A 3C08                <1>         cmp al,0x08
    62 0000004C 75F8                <1>         jnz .noready_read
    63                              <1>          
    64                              <1>     ;//准备好读取
    65                              <1>     .ready_read:
    66 0000004E 59                  <1>         pop cx    
    67                              <1> 
    68                              <1>        ; //计算循环次数 由于每次可读取2byte 所以  循环次数 = 读取扇区数量 * 256
    69 0000004F B80001              <1>         mov ax,256
    70 00000052 F7E1                <1>         mul cx
    71 00000054 89C1                <1>         mov cx,ax
    72                              <1> 
    73 00000056 BAF001              <1>         mov dx,0x1f0
    74                              <1>     
    75                              <1>     ;//读取数据
    76                              <1>     .read_data:
    77 00000059 ED                  <1>         in ax,dx
    78 0000005A 8904                <1>         mov [si],ax
    79 0000005C 83C602              <1>         add si,2
    80 0000005F E2F8                <1>         loop .read_data
    81                              <1> 
    82 00000061 C3                  <1> ret
    83                              <1> 
    84                              <1> 
    85                              <1> 
    86                              <1> 
    87                              <1> 
    13                                  
    14 00000062 00<rep 19Ch>            times 510-($-$$) db 0
    15 000001FE 55AA                    db 0x55,0xaa
    16                                  
    17                                  
    18                                  
    19                                  
    20                                  

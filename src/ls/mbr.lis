     1                                  
     2                                  section mbr vstart=0x7c00
     3                                  
     4                                  ;clear display
     5 00000000 B80006                      mov ax,0x0600
     6 00000003 BB0007                      mov bx,0x0700
     7 00000006 B90000                      mov cx,0
     8 00000009 BA4F18                      mov dx,0x184f
     9 0000000C CD10                        int 0x10
    10                                  
    11 0000000E BE0005                      mov si,0x500
    12 00000011 B90500                      mov cx,5
    13 00000014 66B801000000                mov eax,1
    14                                  
    15 0000001A EB05                        jmp read_disk_16
    16                                  
    17 0000001C EA00050000                  jmp 0x0000:0x500
    18                                  
    19                                      ;jmp $
    20                                     
    21                                      %include ".\src\disk_reader_16.asm"
    22                              <1> ;// 按两字节 读取硬盘
    23                              <1> ;// sp:读取内容后需要加载到的内存
    24                              <1> ;// cl: 读取的扇区数量
    25                              <1> ;// eax:LBA模式下 最开始读取的扇区下标
    26                              <1> read_disk_16:
    27                              <1>   
    28                              <1>    ; //保存需要加载到的地址
    29 00000021 56                  <1>     push si
    30 00000022 51                  <1>     push cx
    31 00000023 6650                <1>     push eax
    32                              <1>    ; //保存需要读取的扇区数
    33                              <1>   
    34                              <1>    ; //写入需要读取的扇区数量
    35 00000025 BAF201              <1>     mov dx,0x1F2
    36 00000028 89C8                <1>     mov ax,cx
    37 0000002A EE                  <1>     out dx,al
    38                              <1> 
    39 0000002B 6658                <1>     pop eax
    40                              <1> 
    41                              <1>     ;//lba模式低8bit
    42 0000002D BAF301              <1>     mov dx,0x1F3
    43 00000030 EE                  <1>     out dx,al
    44                              <1> 
    45                              <1>     ;//lba模式中8bit
    46 00000031 B90800              <1>     mov cx,8
    47                              <1> 
    48 00000034 BAF401              <1>     mov dx,0x1F4
    49 00000037 66D3E8              <1>     shr eax,cl
    50 0000003A EE                  <1>     out dx,al
    51                              <1> 
    52 0000003B BAF501              <1>     mov dx,0x1F5
    53 0000003E 66D3E8              <1>     shr eax,cl
    54 00000041 EE                  <1>     out dx,al
    55                              <1> 
    56 00000042 66D3E8              <1>     shr eax,cl
    57 00000045 240F                <1>     and al,0x0F
    58 00000047 0CE0                <1>     or al,0xE0
    59 00000049 BAF601              <1>     mov dx,0x1F6
    60 0000004C EE                  <1>     out dx,al
    61                              <1>     
    62 0000004D BAF701              <1>     mov dx,0x1F7
    63 00000050 B82000              <1>     mov ax,0x20
    64 00000053 EE                  <1>     out dx,al
    65                              <1> 
    66                              <1>     ;//未准备好读取
    67                              <1>     .noready_read:
    68 00000054 90                  <1>         nop
    69 00000055 EC                  <1>         in al,dx
    70 00000056 2488                <1>         and al,1000_1000b
    71 00000058 3C08                <1>         cmp al,0x08
    72 0000005A 75F8                <1>         jnz .noready_read
    73                              <1>          
    74                              <1>     ;//准备好读取
    75                              <1>     .ready_read:
    76 0000005C 59                  <1>         pop cx    
    77                              <1> 
    78                              <1>        ; //计算循环次数 由于每次可读取2byte 所以  循环次数 = 读取扇区数量 * 256
    79 0000005D B80001              <1>         mov ax,256
    80 00000060 F7E1                <1>         mul cx
    81 00000062 89C1                <1>         mov cx,ax
    82                              <1> 
    83 00000064 BAF001              <1>         mov dx,0x1f0
    84                              <1>     
    85                              <1>     ;//读取数据
    86                              <1>     .read_data:
    87 00000067 ED                  <1>         in ax,dx
    88 00000068 8904                <1>         mov [si],ax
    89 0000006A 83C602              <1>         add si,2
    90 0000006D E2F8                <1>         loop .read_data
    91                              <1> 
    92 0000006F C3                  <1> ret
    93                              <1> 
    94                              <1> 
    95                              <1> 
    96                              <1> 
    97                              <1> 
    22                                  
    23                                  
    24 00000070 00<rep 18Eh>                times 510-($-$$) db 0
    25                                      
    26 000001FE 55AA                        db 0x55,0xaa
    27                                  
    28                                  
    29                                  
    30                                  
    31                                  

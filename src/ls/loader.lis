     1                                  
     2                                  
     3                                  NOMARL_COLOR EQU 1000_1111B
     4                                  SWMP_HEX_FLAG EQU 0x534d4150
     5                                  ARDS_SIZE EQU 20
     6                                  
     7                                  section loader vstart=0x500
     8                                  
     9 00000000 00000000                    total_memory_bytes dd 0
    10                                  
    11 00000004 B800B8                     mov ax,0xb800
    12 00000007 8EE0                        mov fs,ax    
    13                                      
    14 00000009 64C606000063                mov byte [fs:0x00],'c'
    15 0000000F 64C60601008F                mov byte [fs:0x01],NOMARL_COLOR
    16                                  
    17 00000015 64C60602006F                mov byte [fs:0x02],'o'
    18 0000001B 64C60603008F                mov byte [fs:0x03],NOMARL_COLOR
    19                                  
    20 00000021 64C60604006D                mov byte [fs:0x04],'m'
    21 00000027 64C60605008F                mov byte [fs:0x05],NOMARL_COLOR
    22                                  
    23 0000002D 64C606060070                mov byte [fs:0x06],'p'
    24 00000033 64C60607008F                mov byte [fs:0x07],NOMARL_COLOR
    25                                  
    26 00000039 64C60608006C                mov byte [fs:0x08],'l'
    27 0000003F 64C60609008F                mov byte [fs:0x09],NOMARL_COLOR
    28                                  
    29 00000045 64C6060A0065                mov byte [fs:0x0a],'e'
    30 0000004B 64C6060B008F                mov byte [fs:0x0b],NOMARL_COLOR
    31                                  
    32 00000051 64C6060C0074                mov byte [fs:0x0c],'t'
    33 00000057 64C6060D008F                mov byte [fs:0x0d],NOMARL_COLOR
    34                                  
    35 0000005D 64C6060E0065                mov byte [fs:0x0e],'e'
    36 00000063 64C6060F008F                mov byte [fs:0x0f],NOMARL_COLOR
    37                                  
    38 00000069 64C606100064                mov byte [fs:0x10],'d'
    39 0000006F 64C60611008F                mov byte [fs:0x11],NOMARL_COLOR
    40                                  
    41 00000075 64C606120020                mov byte [fs:0x12],' '
    42 0000007B 64C60613008F                mov byte [fs:0x13],NOMARL_COLOR
    43                                  
    44 00000081 64C606140021                mov byte [fs:0x14],'!'
    45 00000087 64C60615008F                mov byte [fs:0x15],NOMARL_COLOR
    46                                      ;call detect_memory_code.detect_memory_e820
    47                                  
    48 0000008D EB26                        jmp loader_start
    49                                  
    50                                      %include ".\src\realmode2protectedmode.asm"
    51                              <1> ;cpu real mode to protected mode
    52                              <1> ;last update : 2022-1-10
    53                              <1> 
    54                              <1> ;=====================================
    55                              <1> 
    56                              <1> DESC_G_4K   EQU 1_0_0_0_0000_0_00_0_0000_00000000B
    57                              <1> DESC_DB_32  EQU 0_1_0_0_0000_0_00_0_0000_00000000B
    58                              <1> DESC_L_32   EQU 0_0_0_0_0000_0_00_0_0000_00000000B
    59                              <1> DESC_L_64   EQU 0_0_1_0_0000_0_00_0_0000_00000000B
    60                              <1> DESC_AVL    EQU 0_0_0_0_0000_0_00_0_0000_00000000B
    61                              <1> DESC_P      EQU 1_00_0_0000_00000000B
    62                              <1> DESC_DPL    EQU 00_0_0000_00000000B
    63                              <1> DESC_S_F    EQU 1_0000_00000000B
    64                              <1> DESC_S_T    EQU 0_0000_00000000B
    65                              <1> TI_GDT EQU 000b
    66                              <1> TI_LDT EQU 100b
    67                              <1> 
    68                              <1> RPL_0 EQU 00B
    69                              <1> RPL_1 EQU 01B
    70                              <1> RPL_2 EQU 10B
    71                              <1> RPL_3 EQU 11B
    72                              <1> 
    73                              <1> ;descriptor limit hight 4bit mask
    74                              <1> LIMIT_HIGHT_4_MASK EQU 0xF0000
    75                              <1> ;descriptor limit low 16 bit mask
    76                              <1> LIMIT_LOW_16_MASK   EQU 0x0FFFF
    77                              <1> 
    78                              <1> ADDR_HIGHT_8_MASK EQU 0xFF000000
    79                              <1> ADDR_MID_8_MASK   EQU 0x00FF0000
    80                              <1> ADDR_LOW_16_MASK  EQU 0x0000FFFF
    81                              <1> 
    82                              <1> 
    83                              <1> ;=====[code descriptor]======
    84                              <1> ;code's descriptor base address
    85                              <1> DESC_CODE_BASE_ADDR EQU 0x00000000
    86                              <1> ;code's descriptor limit
    87                              <1> DESC_CODE_LIMIT EQU 0xFFFFF
    88                              <1> 
    89                              <1> DESC_CODE_LIMIT_HIGH_4 EQU (DESC_CODE_LIMIT & LIMIT_HIGHT_4_MASK)>>16
    90                              <1> 
    91                              <1> DESC_CODE_LIMIT_LOW_16 EQU DESC_CODE_LIMIT & LIMIT_LOW_16_MASK
    92                              <1> 
    93                              <1> DESC_CODE_ADDR_HIGHT_8 EQU (DESC_CODE_BASE_ADDR & ADDR_HIGHT_8_MASK)>>24
    94                              <1> 
    95                              <1> DESC_CODE_ADDR_MID_8   EQU (DESC_CODE_BASE_ADDR & ADDR_MID_8_MASK)>>16
    96                              <1> 
    97                              <1> DESC_CODE_ADDR_LOW_16   EQU DESC_CODE_BASE_ADDR & ADDR_LOW_16_MASK
    98                              <1> 
    99                              <1> DESC_CODE_TYPE         EQU 1000_00000000B
   100                              <1> ;==================================================================================================================================
   101                              <1> ;=| addr's high 8bit | G | D/B | L | AVL | code limit's high 4bit | P | DPL | is system segment | desc's type | addr's mid 8 bit |=
   102                              <1> ;==================================================================================================================================
   103                              <1> ;                                                                    1   01           1             1000          0000 0000
   104                              <1> DESC_CODE_HIGHT_32    EQU  (DESC_CODE_ADDR_HIGHT_8<<24) + DESC_G_4K + DESC_DB_32 + DESC_L_32 + DESC_AVL + (DESC_CODE_LIMIT_HIGH_4<<16) + DESC_P + DESC_DPL + DESC_S_F + DESC_CODE_TYPE + DESC_CODE_ADDR_MID_8
   105                              <1> 
   106                              <1> ;00000000_1_1_0_0_1111_1_10_1_1000_00000000b
   107                              <1> 
   108                              <1> ;=====[end code discriptor]===== 
   109                              <1> 
   110                              <1> ;=====[data discriptor]=====
   111                              <1> DESC_DATA_BASE_ADDR EQU 0
   112                              <1> DESC_DATA_LIMIT EQU 0xFFFFF
   113                              <1> DESC_DATA_LIMIT_HIGHT_4 EQU (DESC_DATA_LIMIT  & LIMIT_HIGHT_4_MASK) >>16
   114                              <1> DESC_DATA_LIMIT_LOW_16  EQU  DESC_DATA_LIMIT & LIMIT_LOW_16_MASK
   115                              <1> DESC_DATA_ADDR_HIGHT_8  EQU (DESC_DATA_BASE_ADDR & ADDR_HIGHT_8_MASK)>>24
   116                              <1> DESC_DATA_ADDR_MID_8    EQU (DESC_DATA_BASE_ADDR & ADDR_MID_8_MASK)>>16
   117                              <1> DESC_DATA_ADDR_LOW_16   EQU DESC_DATA_BASE_ADDR & ADDR_LOW_16_MASK
   118                              <1> DESC_DATA_TYPE EQU 0010_00000000B
   119                              <1> 
   120                              <1> DESC_DATA_HIGT_32 EQU (DESC_DATA_ADDR_HIGHT_8<<24) + DESC_G_4K + DESC_DB_32 + DESC_L_32 + DESC_AVL + (DESC_DATA_LIMIT_HIGHT_4<<16) + DESC_P + DESC_DPL + DESC_S_F + DESC_DATA_TYPE + DESC_DATA_ADDR_MID_8
   121                              <1> 
   122                              <1> ;=====[end data discriptor]=====
   123                              <1> 
   124                              <1> ;=====[video discriptor]=====
   125                              <1> DESC_VIDEO_BASE_ADDR EQU 0x000B8000
   126                              <1> DESC_VIDEO_LIMIT EQU ((0xBFFFF - 0xB8000)/4096);4k
   127                              <1> DESC_VIDEO_LIMIT_HIGHT_4 EQU (DESC_VIDEO_LIMIT  & LIMIT_HIGHT_4_MASK)>>16
   128                              <1> DESC_VIDEO_LIMIT_LOW_16  EQU  DESC_VIDEO_LIMIT & LIMIT_LOW_16_MASK
   129                              <1> DESC_VIDEO_ADDR_HIGHT_8 EQU (DESC_VIDEO_BASE_ADDR & ADDR_HIGHT_8_MASK)>>24
   130                              <1> DESC_VIDEO_ADDR_MID_8   EQU (DESC_VIDEO_BASE_ADDR & ADDR_MID_8_MASK)>>16
   131                              <1> DESC_VIDEO_ADDR_LOW_16  EQU DESC_VIDEO_BASE_ADDR & ADDR_LOW_16_MASK
   132                              <1> DESC_VIDEO_TYPE EQU 0010_00000000B
   133                              <1> DESC_VIDEO_HIGT_32 EQU (DESC_VIDEO_ADDR_HIGHT_8<<24) + DESC_G_4K + DESC_DB_32 + DESC_L_32 + DESC_AVL + (DESC_VIDEO_LIMIT_HIGHT_4<<16) + DESC_P + DESC_DPL + DESC_S_F + DESC_VIDEO_TYPE + DESC_VIDEO_ADDR_MID_8
   134                              <1> 
   135                              <1> ;=====[end video discriptor]=====
   136                              <1> 
   137                              <1> GDT_BASE_ADDR:
   138 0000008F 00000000            <1>     dd 0
   139 00000093 00000000            <1>     dd 0    
   140                              <1> GDT_DESC_CODE:;(DESC_CODE_ADDR_LOW_16<<16)
   141 00000097 FFFF0000            <1>     dd  (DESC_CODE_ADDR_LOW_16<<16)+ DESC_CODE_LIMIT_LOW_16
   142 0000009B 0098CF00            <1>     dd DESC_CODE_HIGHT_32
   143                              <1> 
   144                              <1> GDT_DESC_DATA:
   145 0000009F FFFF0000            <1>     dd (DESC_DATA_ADDR_LOW_16<<16) + DESC_DATA_LIMIT_LOW_16
   146 000000A3 0092CF00            <1>     dd DESC_DATA_HIGT_32
   147                              <1> GDT_DESC_VIDEO:
   148 000000A7 07000080            <1>     dd (DESC_VIDEO_ADDR_LOW_16<<16) + DESC_VIDEO_LIMIT_LOW_16 ;0x80000007;
   149 000000AB 0B92C000            <1>     dd DESC_VIDEO_HIGT_32
   150                              <1> 
   151                              <1> GDT_SIZE EQU $-GDT_BASE_ADDR
   152                              <1> GDT_LIMIT EQU GDT_SIZE-1
   153                              <1> 
   154                              <1> selector_code EQU (0x0001<<3) + RPL_0 + TI_GDT
   155                              <1> selector_data EQU (0x0002<<3) + RPL_0 + TI_GDT
   156                              <1> selector_video EQU (0x0003<<3) + RPL_0 + TI_GDT
   157                              <1> 
   158                              <1> ;open 20a
   159                              <1> 
   160 000000AF 1F00                <1> gdt_ptr dw GDT_LIMIT
   161 000000B1 [8F000000]          <1>         dd GDT_BASE_ADDR
   162                              <1> 
   163                              <1> loader_start:
   164 000000B5 E492                <1> in al,0x92
   165 000000B7 0C02                <1> or al,0000_0010b
   166 000000B9 E692                <1> out 0x92,al
   167                              <1> ;load gdt
   168 000000BB 0F0116[AF00]        <1> lgdt [gdt_ptr]
   169                              <1> ; set cr0 reg first bit to 1
   170 000000C0 0F20C0              <1> mov eax,cr0
   171 000000C3 6683C801            <1> or eax,1
   172 000000C7 0F22C0              <1> mov cr0,eax
   173                              <1> 
   174 000000CA 66EA[D2000000]0800  <1> jmp dword selector_code:mode_start
   175                              <1> 
   176                              <1> [bits 32]
   177                              <1> mode_start:
   178 000000D2 66B81000            <1>     mov ax,selector_data
   179 000000D6 8ED8                <1>     mov ds,ax,
   180 000000D8 8EC0                <1>     mov es,ax,
   181 000000DA 8ED0                <1>     mov ss,ax,
   182 000000DC BC00050000          <1>     mov esp,0x500
   183 000000E1 66B81800            <1>     mov ax,selector_video
   184 000000E5 8EE8                <1>     mov gs,ax
   185 000000E7 8EC8                <1>     mov cs,ax
   186                              <1> 
   187 000000E9 65C605A000000070    <1>     mov byte [gs:160],'p'
   188                              <1>   
   189                              <1> 
   190 000000F1 EBFE                <1>     jmp $
   191                              <1> 
    51                                  
    52 000000F3 EBFE                        jmp $
    53                                  
    54                                  
    55                                  
    56                                  section detect_memory_code
    57                                  ;检测内存
    58                                      .detect_memory_e820:
    59 00000000 31DB                        xor ebx,ebx
    60 00000002 BA50414D53                  mov edx,SWMP_HEX_FLAG   
    61 00000007 66BF[0000]                  mov di,ards_buf
    62                                  
    63                                      .get_memory_loop_e820:
    64 0000000B B820E80000                      mov eax,0xE820
    65 00000010 B914000000                      mov ecx,ARDS_SIZE ;ards地址范围20字节
    66 00000015 CD15                            int 0x15
    67 00000017 722F                            jc detect_memory_e801 ;如果cf标志位 =1 跳转e801 指令读取
    68 00000019 6601CF                          add di,cx
    69 0000001C 66FF05[F0000000]                inc word [ards_count] ;ards数量+1
    70 00000023 83FB00                          cmp ebx,0  ;如果ebx=0，说明ards 全部返回 
    71 00000026 75E3                            jnz .get_memory_loop_e820
    72                                  
    73 00000028 668B0D[F0000000]            mov cx,[ards_count]
    74 0000002F BB[00000000]                mov ebx,ards_buf
    75 00000034 31D2                        xor edx,edx
    76                                  
    77                                      ;寻找最大的内存区域
    78                                      .find_max_memory_area:
    79 00000036 8B03                            mov eax,[ebx]
    80 00000038 034308                          add eax,[ebx+8]
    81 0000003B 83C314                          add ebx,ARDS_SIZE   ;指向下一个ards
    82 0000003E 39C2                            cmp edx,eax
    83 00000040 7D02                            jge .next_ards
    84 00000042 89C2                            mov edx,eax
    85                                          
    86                                          .next_ards:
    87 00000044 E2F0                                loop .find_max_memory_area
    88                                  
    89 00000046 EB23                            jmp get_memory_finshed
    90                                  
    91                                  
    92                                  
    93                                  ; int 0x15  E801指令检测内存
    94                                  detect_memory_e801:
    95 00000048 66B801E8                    mov ax,0xe801
    96 0000004C CD15                        int 0x15
    97 0000004E 720C                        jc detect_memory_88 ;如果标志为cf=1 那么说明获取失败，使用88 形式获取内存
    98                                     ; mov cx,1024 
    99                                     ; mul cx   ;也可以写做 shl eax,10
   100 00000050 C1E00A                      shl eax,10  ;等同于 eax * 2^10 次方 2^10 = 1024
   101 00000053 C1E310                      shl ebx,16  ; edx 的单位为64kb 所以需要 edx*64kb , 64kb = 2^16 = 左移 16位
   102 00000056 01D8                        add eax,ebx ;eax * 1024 + ebx * 64 * 1024
   103 00000058 89C2                        mov edx,eax
   104 0000005A EB0F                        jmp get_memory_finshed
   105                                  
   106                                  detect_memory_88:
   107 0000005C B488                        mov ah,0x88
   108 0000005E CD15                        int 0x15
   109 00000060 7207                        jc detect_memory_error
   110 00000062 C1E01A                      shl eax,26
   111 00000065 89C2                        mov edx,eax
   112 00000067 EB02                        jmp get_memory_finshed
   113                                  
   114                                  detect_memory_error:
   115 00000069 EBFE                        jmp $
   116                                  
   117                                  get_memory_finshed:
   118 0000006B 8915[00000000]              mov [total_memory_bytes],edx
   119 00000071 C3                          ret
   120                                  
   121                                  section .data
   122 00000000 00<rep F0h>                 ards_buf times (ARDS_SIZE*12) db 0
   123 000000F0 0000                        ards_count dw 0
   124                                  
   125                                  ;====================
   126                                  ;进入保护模式代码
   127                                  ;====================
